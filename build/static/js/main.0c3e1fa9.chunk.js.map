{"version":3,"sources":["components/PersonForm.js","components/Persons.js","components/Filter.js","services/persons.js","components/Button.js","components/Notification.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["PersonForm","props","react_default","a","createElement","onSubmit","onSubmitFunction","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","RenderPersons","persons","filter","person","name","toUpperCase","includes","newFilter","map","key","number","Button","handleClick","window","confirm","concat","personService","deletePerson","id","then","setMessage","setTimeout","getAll","response","setPersons","data","catch","error","setErrorMessage","text","Filter","handleFilterChange","baseUrl","services_persons","axios","get","create","newObject","post","update","put","delete","_ref","onClick","Notification","message","className","Error","errorMessage","App","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setNewFilter","_useState9","_useState10","_useState11","_useState12","useEffect","console","log","components_Notification","components_Error","components_Filter","event","target","components_PersonForm","preventDefault","personObject","IfSame","length","Persons","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uLAYeA,EAVI,SAACC,GAClB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,kBACpBJ,EAAAC,EAAAC,cAAA,qBAAYF,EAAAC,EAAAC,cAAA,SAAOG,MAAON,EAAMO,QAASC,SAAUR,EAAMS,oBACzDR,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,SAAOG,MAAON,EAAMU,UAAWF,SAAUR,EAAMW,sBAC7DV,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQS,KAAK,UAAb,kBCkCIC,EAvCO,SAACb,GAEnB,OADiBA,EAAMc,QAAQC,OAAO,SAAAC,GAAM,OAAKA,EAAOC,KAAKC,cAAeC,SAASnB,EAAMoB,UAAUF,iBACrFG,IAAI,SAAAL,GAAM,OACtBf,EAAAC,EAAAC,cAAA,OAAKmB,IAAKN,EAAOC,MACZD,EAAOC,KADZ,QAEKD,EAAOO,OAFZ,QAGItB,EAAAC,EAAAC,cAACH,EAAMwB,OAAP,CAAcC,YAAa,WACvB,GAAIC,OAAOC,QAAP,gBAAAC,OAA+BZ,EAAOC,OACtC,OAAOjB,EAAM6B,cACRC,aAAad,EAAOe,IACpBC,KAAK,WAOF,OANAhC,EAAMiC,WAAN,GAAAL,OACOZ,EAAOC,KADd,eAGAiB,WAAW,WACPlC,EAAMiC,WAAW,OAClB,KACIjC,EAAM6B,cACRM,SACAH,KAAK,SAAAI,GACFpC,EAAMqC,WAAWD,EAASE,UAIrCC,MAAM,SAAAC,GACHxC,EAAMyC,gBAAN,GAAAb,OACOZ,EAAOC,KADd,qBAGAiB,WAAW,WACPlC,EAAMyC,gBAAgB,OACvB,QAKfC,KAAM,eC1BPC,EATA,SAAC3C,GACZ,OACIC,EAAAC,EAAAC,cAAA,yCAEAF,EAAAC,EAAAC,cAAA,SAAOG,MAAON,EAAMoB,UAAWZ,SAAUR,EAAM4C,uCCLjDC,EAAU,oCAkBDC,EAAA,CACbX,OAjBa,WACb,OAAOY,IAAMC,IAAIH,IAiBjBI,OAda,SAAAC,GACb,OAAOH,IAAMI,KAAKN,EAASK,IAc3BE,OAXa,SAACrB,EAAImB,GAClB,OAAOH,IAAMM,IAAN,GAAAzB,OAAaiB,EAAb,KAAAjB,OAAwBG,GAAMmB,IAWrCpB,aARmB,SAACC,GACpB,OAAOgB,IAAMO,OAAN,GAAA1B,OAAgBiB,EAAhB,KAAAjB,OAA2BG,MCRrBP,EANA,SAAA+B,GAAA,IAAG9B,EAAH8B,EAAG9B,YAAaiB,EAAhBa,EAAgBb,KAAhB,OACXzC,EAAAC,EAAAC,cAAA,UAAQqD,QAAS/B,GACZiB,ICSMe,EAXM,SAAAF,GAAiB,IAAdG,EAAcH,EAAdG,QACpB,OAAgB,OAAZA,EACK,KAIPzD,EAAAC,EAAAC,cAAA,OAAKwD,UAAU,WACZD,ICKQE,EAZH,SAAAL,GAAsB,IAAnBM,EAAmBN,EAAnBM,aACb,OAAqB,OAAjBA,EACK,KAIP5D,EAAAC,EAAAC,cAAA,OAAKwD,UAAU,SACZE,ICmHMC,EAlHH,WAAM,IAAAC,EACcC,mBAAS,IADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTjD,EADSmD,EAAA,GACA5B,EADA4B,EAAA,GAAAG,EAEcJ,mBAAS,IAFvBK,EAAAH,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAET7D,EAFS8D,EAAA,GAEAC,EAFAD,EAAA,GAAAE,EAGkBP,mBAAS,IAH3BQ,EAAAN,OAAAC,EAAA,EAAAD,CAAAK,EAAA,GAGT7D,EAHS8D,EAAA,GAGEC,EAHFD,EAAA,GAAAE,EAIkBV,mBAAS,IAJ3BW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAITtD,EAJSuD,EAAA,GAIEC,EAJFD,EAAA,GAAAE,EAKcb,mBAAS,MALvBc,EAAAZ,OAAAC,EAAA,EAAAD,CAAAW,EAAA,GAKTnB,EALSoB,EAAA,GAKA7C,EALA6C,EAAA,GAAAC,EAMwBf,mBAAS,MANjCgB,EAAAd,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAMTlB,EANSmB,EAAA,GAMKvC,EANLuC,EAAA,GAmFhB,OAXAC,oBAAU,WACRpD,EACGM,SACAH,KAAK,SAAAI,GACJC,EAAWD,EAASE,QAErBC,MAAM,SAAAC,GACL0C,QAAQC,IAAI,WAEf,IAGDlF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACiF,EAAD,CAAc1B,QAASA,IACvBzD,EAAAC,EAAAC,cAACkF,EAAD,CAAOxB,aAAcA,IACrB5D,EAAAC,EAAAC,cAACmF,EAAD,CACE1C,mBA3EqB,SAAC2C,GAC1BX,EAAaW,EAAMC,OAAOlF,QA2EtBc,UAAWA,IAEbnB,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACsF,EAAD,CACElF,QAASA,EACTG,UAAWA,EACXD,iBAxFmB,SAAC8E,GACxBjB,EAAWiB,EAAMC,OAAOlF,QAwFpBK,mBAtFqB,SAAC4E,GAC1Bd,EAAac,EAAMC,OAAOlF,QAsFtBD,iBAhFU,SAACkF,GACfA,EAAMG,iBACN,IAAMC,EAAe,CACnB1E,KAAMV,EACNgB,OAAQb,GAEJkF,EAAS9E,EAAQC,OAAO,SAAAC,GAAM,OAAIA,EAAOC,OAASV,IAClC,IAAlBqF,EAAOC,OACLnE,OAAOC,QAAP,GAAAC,OAAkBrB,EAAlB,2DACFsB,EACGuB,OAAOwC,EAAO,GAAG7D,GAAI4D,GACrB3D,KAAK,kBAAMH,EACTM,SACAH,KAAK,SAAAI,GAQJ,OAPAH,EAAU,GAAAL,OACLrB,EADK,mBAGV2B,WAAW,WACTD,EAAW,OACV,KAEII,EAAWD,EAASE,QAE5BC,MAAM,SAAAC,GACLC,EAAe,GAAAb,OACVrB,EADU,oBAGf2B,WAAW,WACTO,EAAgB,OACf,SAMXZ,EACGoB,OAAO0C,GACP3D,KAAK,SAAAI,GAOJ,OANAH,EAAU,GAAAL,OACLrB,EADK,gBAGV2B,WAAW,WACTD,EAAW,OACV,KACII,EAAWD,EAASE,QAE5BC,MAAM,SAAAC,GACL0C,QAAQC,IAAI,UAGlBb,EAAW,IACXG,EAAa,OA+BXxE,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAC2F,EAAD,CACEhF,QAASA,EACTM,UAAWA,EACXS,cAAeA,EACfQ,WAAYA,EACZb,OAAQA,EACRS,WAAYA,EACZQ,gBAAiBA,MC1GLsD,QACW,cAA7BrE,OAAOsE,SAASC,UAEe,UAA7BvE,OAAOsE,SAASC,UAEhBvE,OAAOsE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnG,EAAAC,EAAAC,cAACkG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1E,KAAK,SAAA2E,GACjCA,EAAaC","file":"static/js/main.0c3e1fa9.chunk.js","sourcesContent":["import React from 'react'\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.onSubmitFunction}>\n      <div> nimi: <input value={props.newName} onChange={props.handleNameChange} /></div>\n      <div> numero: <input value={props.newNumber} onChange={props.handleNumberChange} /></div>\n      <div><button type=\"submit\">lisää</button></div>\n    </form>\n  )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst RenderPersons = (props) => {\n    const persons2 = props.persons.filter(person => (person.name.toUpperCase()).includes(props.newFilter.toUpperCase()))\n    return persons2.map(person =>\n        <div key={person.name}>\n            {person.name} &nbsp;\n            {person.number} &nbsp;\n            <props.Button handleClick={() => {\n                if (window.confirm(`Poistetaanko ${person.name}`)) {\n                    return props.personService\n                        .deletePerson(person.id)\n                        .then(() => {\n                            props.setMessage(\n                                `${person.name} poistettu`\n                            )\n                            setTimeout(() => {\n                                props.setMessage(null)\n                            }, 5000)\n                            return props.personService\n                                .getAll()\n                                .then(response => {\n                                    props.setPersons(response.data);\n                                });\n                        }\n                        )\n                        .catch(error => {\n                            props.setErrorMessage(\n                                `${person.name} on jo poistettu`\n                            )\n                            setTimeout(() => {\n                                props.setErrorMessage(null)\n                            }, 5000)\n                        });\n                }\n            }\n            }\n                text={\"delete\"} />\n        </div>)\n}\n\nexport default RenderPersons","import React from 'react'\n\nconst Filter = (props) => {\n    return (\n        <div> \n        rajaa näytettäviä: \n        <input value={props.newFilter} onChange={props.handleFilterChange} />\n        </div>\n    )\n}\n\nexport default Filter","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst deletePerson = (id) => {\n  return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default {\n  getAll: getAll,\n  create: create,\n  update: update,\n  deletePerson: deletePerson\n}","import React from 'react'\n\nconst Button = ({ handleClick, text }) => (\n    <button onClick={handleClick}>\n        {text}\n    </button>\n)\n\nexport default Button","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n\n    return (\n      <div className=\"message\">\n        {message}\n      </div>\n    )\n  }\nexport default Notification","import React from 'react'\n\nconst Error = ({ errorMessage }) => {\n    if (errorMessage === null) {\n      return null\n    }\n\n    return (\n      <div className=\"error\">\n        {errorMessage}\n      </div>\n    )\n  }\n\n  export default Error","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport personService from './services/persons.js'\nimport Button from './components/Button'\nimport Notification from './components/Notification'\nimport Error from './components/Error'\nimport './index.css'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [message, setMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n  \n  const addInfo = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    const IfSame = persons.filter(person => person.name === newName)\n    if (IfSame.length !== 0) {\n      if (window.confirm(`${newName} on jo luettelossa, korvataanko vanha numero uudella?`)) {\n        personService\n          .update(IfSame[0].id, personObject)\n          .then(() => personService\n            .getAll()\n            .then(response => {\n              setMessage(\n                `${newName} päivitetty`\n              )\n              setTimeout(() => {\n                setMessage(null)\n              }, 5000)\n\n              return setPersons(response.data);\n            })\n            .catch(error => {\n              setErrorMessage(\n                `${newName} tapahtui virhe`\n              )\n              setTimeout(() => {\n                setErrorMessage(null)\n              }, 5000)\n            })\n          );\n      }\n    }\n    else {\n      personService\n        .create(personObject)\n        .then(response => {\n          setMessage(\n            `${newName} lisätty`\n          )\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n          return setPersons(response.data)\n        })\n        .catch(error => {\n          console.log('fail')\n        })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n      .catch(error => {\n        console.log('fail')\n      })\n  }, [])\n\n  return (\n    <div>\n      <h2>Puhelinluettelo</h2>\n      <Notification message={message} />\n      <Error errorMessage={errorMessage} />\n      <Filter\n        handleFilterChange={handleFilterChange}\n        newFilter={newFilter}\n      />\n      <h3>lisää uusi</h3>\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        onSubmitFunction={addInfo}\n      />\n      <h2>Numerot</h2>\n      <Persons\n        persons={persons}\n        newFilter={newFilter}\n        personService={personService}\n        setPersons={setPersons}\n        Button={Button}\n        setMessage={setMessage}\n        setErrorMessage={setErrorMessage}\n      />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}